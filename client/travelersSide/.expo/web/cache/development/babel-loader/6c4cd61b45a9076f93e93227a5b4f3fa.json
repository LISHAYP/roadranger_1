{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport { addNotificationResponseReceivedListener } from \"./NotificationsEmitter\";\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nexport default function useLastNotificationResponse() {\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastNotificationResponse = _useState2[0],\n    setLastNotificationResponse = _useState2[1];\n  useLayoutEffect(function () {\n    var subscription = addNotificationResponseReceivedListener(function (response) {\n      setLastNotificationResponse(response);\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, []);\n  useEffect(function () {\n    NotificationsEmitterModule.getLastNotificationResponseAsync == null ? void 0 : NotificationsEmitterModule.getLastNotificationResponseAsync().then(function (response) {\n      setLastNotificationResponse(function (currentResponse) {\n        return currentResponse != null ? currentResponse : response;\n      });\n    });\n  }, []);\n  return lastNotificationResponse;\n}","map":{"version":3,"sources":["../src/useLastNotificationResponse.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,eAAe,EAAE,QAAQ,QAAQ,OAAO;AAG5D,SAAS,uCAAuC;AAChD,OAAO,0BAA0B;AAqCjC,eAAc,SAAU,2BAA2B,CAAA,EAAA;EACjD,IAAA,SAAA,GAAgE,QAAQ,CAEtE,SAAS,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAFL,wBAAwB,GAAA,UAAA;IAAE,2BAA2B,GAAA,UAAA;EAK5D,eAAe,CAAC,YAAK;IACnB,IAAM,YAAY,GAAG,uCAAuC,CAAC,UAAC,QAAQ,EAAI;MACxE,2BAA2B,CAAC,QAAQ,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,YAAK;MACV,YAAY,CAAC,MAAM,EAAE;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAKN,SAAS,CAAC,YAAK;IACb,0BAA0B,CAAC,gCAAgC,oBAA3D,0BAA0B,CAAC,gCAAgC,EAAI,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAI;MAIhF,2BAA2B,CAAC,UAAC,eAAe;QAAA,OAAK,eAAe,WAAf,eAAe,GAAI,QAAQ;MAAA,EAAC;IAC/E,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,wBAAwB;AACjC","sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n/**\n * A React hook always returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(undefined);\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    const subscription = addNotificationResponseReceivedListener((response) => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  // On each mount of this hook we fetch last notification response\n  // from the native module which is an \"always active listener\"\n  // and always returns the most recent response.\n  useEffect(() => {\n    NotificationsEmitterModule.getLastNotificationResponseAsync?.().then((response) => {\n      // We only update the state with the resolved value if it's empty,\n      // because if it's not empty it must have been populated by the `useLayoutEffect`\n      // listener which returns \"live\" values.\n      setLastNotificationResponse((currentResponse) => currentResponse ?? response);\n    });\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}