{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport dayjs from 'dayjs';\nimport Color from \"./Color\";\nimport { StylePropType, isSameDay } from \"./utils\";\nimport { DATE_FORMAT } from \"./Constant\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600'\n  }\n});\nexport function Day(_ref) {\n  var _ref$dateFormat = _ref.dateFormat,\n    dateFormat = _ref$dateFormat === void 0 ? DATE_FORMAT : _ref$dateFormat,\n    currentMessage = _ref.currentMessage,\n    previousMessage = _ref.previousMessage,\n    containerStyle = _ref.containerStyle,\n    wrapperStyle = _ref.wrapperStyle,\n    textStyle = _ref.textStyle;\n  var _useChatContext = useChatContext(),\n    getLocale = _useChatContext.getLocale;\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage)) {\n    return null;\n  }\n  return _jsx(View, {\n    style: [styles.container, containerStyle],\n    children: _jsx(View, {\n      style: wrapperStyle,\n      children: _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: dayjs(currentMessage.createdAt).locale(getLocale()).format(dateFormat)\n      })\n    })\n  });\n}\nDay.propTypes = {\n  currentMessage: PropTypes.object,\n  previousMessage: PropTypes.object,\n  nextMessage: PropTypes.object,\n  inverted: PropTypes.bool,\n  containerStyle: StylePropType,\n  wrapperStyle: StylePropType,\n  textStyle: StylePropType,\n  dateFormat: PropTypes.string\n};","map":{"version":3,"sources":["../src/Day.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,OAAO,SAAS,MAAM,YAAY;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAAA,OAAA,IAAA;AAUlC,OAAO,KAAK,MAAM,OAAO;AAEzB,OAAO,KAAK;AACZ,SAAS,aAAa,EAAE,SAAS;AACjC,SAAS,WAAW;AAGpB,SAAS,cAAc;AAA6B,SAAA,GAAA,IAAA,IAAA;AAEpD,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;EAC/B,SAAS,EAAE;IACT,UAAU,EAAE,QAAQ;IACpB,cAAc,EAAE,QAAQ;IACxB,SAAS,EAAE,CAAC;IACZ,YAAY,EAAE;GACf;EACD,IAAI,EAAE;IACJ,eAAe,EAAE,KAAK,CAAC,qBAAqB;IAC5C,KAAK,EAAE,KAAK,CAAC,YAAY;IACzB,QAAQ,EAAE,EAAE;IACZ,UAAU,EAAE;EACb;CACF,CAAC;AAcF,OAAM,SAAU,GAAG,CAAA,IAAA,EAOE;EAAA,IAAA,eAAA,GAAA,IAAA,CANnB,UAAU;IAAV,UAAU,GAAA,eAAA,cAAG,WAAW,GAAA,eAAA;IACxB,cAAc,GAAA,IAAA,CAAd,cAAc;IACd,eAAe,GAAA,IAAA,CAAf,eAAe;IACf,cAAc,GAAA,IAAA,CAAd,cAAc;IACd,YAAY,GAAA,IAAA,CAAZ,YAAY;IACZ,SAAS,GAAA,IAAA,CAAT,SAAS;EAET,IAAA,eAAA,GAAsB,cAAc,EAAE;IAA9B,SAAS,GAAA,eAAA,CAAT,SAAS;EAEjB,IAAI,cAAc,IAAI,IAAI,IAAI,SAAS,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE;IACxE,OAAO,IAAI;EACZ;EAED,OACE,IAAA,CAAC,IAAI;IAAC,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAE;IAAA,QAAA,EAC9C,IAAA,CAAC,IAAI;MAAC,KAAK,EAAE,YAAa;MAAA,QAAA,EACxB,IAAA,CAAC,IAAI;QAAC,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAE;QAAA,QAAA,EACnC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAC7B,MAAM,CAAC,SAAS,EAAE,CAAC,CACnB,MAAM,CAAC,UAAU;MAAC;IAEzB;EACF,EAAO;AAEX;AAEA,GAAG,CAAC,SAAS,GAAG;EACd,cAAc,EAAE,SAAS,CAAC,MAAM;EAChC,eAAe,EAAE,SAAS,CAAC,MAAM;EACjC,WAAW,EAAE,SAAS,CAAC,MAAM;EAC7B,QAAQ,EAAE,SAAS,CAAC,IAAI;EACxB,cAAc,EAAE,aAAa;EAC7B,YAAY,EAAE,aAAa;EAC3B,SAAS,EAAE,aAAa;EACxB,UAAU,EAAE,SAAS,CAAC;CACvB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, View, } from 'react-native';\nimport dayjs from 'dayjs';\nimport Color from './Color';\nimport { StylePropType, isSameDay } from './utils';\nimport { DATE_FORMAT } from './Constant';\nimport { useChatContext } from './GiftedChatContext';\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 5,\n        marginBottom: 10,\n    },\n    text: {\n        backgroundColor: Color.backgroundTransparent,\n        color: Color.defaultColor,\n        fontSize: 12,\n        fontWeight: '600',\n    },\n});\nexport function Day({ dateFormat = DATE_FORMAT, currentMessage, previousMessage, containerStyle, wrapperStyle, textStyle, }) {\n    const { getLocale } = useChatContext();\n    if (currentMessage == null || isSameDay(currentMessage, previousMessage)) {\n        return null;\n    }\n    return (<View style={[styles.container, containerStyle]}>\n      <View style={wrapperStyle}>\n        <Text style={[styles.text, textStyle]}>\n          {dayjs(currentMessage.createdAt)\n            .locale(getLocale())\n            .format(dateFormat)}\n        </Text>\n      </View>\n    </View>);\n}\nDay.propTypes = {\n    currentMessage: PropTypes.object,\n    previousMessage: PropTypes.object,\n    nextMessage: PropTypes.object,\n    inverted: PropTypes.bool,\n    containerStyle: StylePropType,\n    wrapperStyle: StylePropType,\n    textStyle: StylePropType,\n    dateFormat: PropTypes.string,\n};\n//# sourceMappingURL=Day.js.map"]},"metadata":{},"sourceType":"module"}