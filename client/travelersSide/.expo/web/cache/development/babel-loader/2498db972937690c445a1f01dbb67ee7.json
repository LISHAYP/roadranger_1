{"ast":null,"code":"var _jsxFileName = \"/home/runner/work/react-native-action-sheet/react-native-action-sheet/src/ActionSheetProvider.tsx\";\nimport * as React from 'react';\nimport NativeActionSheet from \"./ActionSheet\";\nimport CustomActionSheet from \"./ActionSheet/CustomActionSheet\";\nimport { Provider } from \"./context\";\nexport default React.forwardRef(function ActionSheetProvider(_ref, ref) {\n  var children = _ref.children,\n    useNativeDriver = _ref.useNativeDriver,\n    _ref$useCustomActionS = _ref.useCustomActionSheet,\n    useCustomActionSheet = _ref$useCustomActionS === void 0 ? false : _ref$useCustomActionS;\n  var actionSheetRef = React.useRef(null);\n  var context = React.useMemo(function () {\n    return {\n      showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {\n        if (actionSheetRef.current) {\n          actionSheetRef.current.showActionSheetWithOptions(options, callback);\n        }\n      }\n    };\n  }, [actionSheetRef]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      getContext: function getContext() {\n        return context;\n      },\n      showActionSheetWithOptions: context.showActionSheetWithOptions\n    };\n  }, [context]);\n  var ActionSheet = React.useMemo(function () {\n    return useCustomActionSheet ? CustomActionSheet : NativeActionSheet;\n  }, [useCustomActionSheet]);\n  return React.createElement(Provider, {\n    value: context,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(ActionSheet, {\n    ref: actionSheetRef,\n    useNativeDriver: useNativeDriver,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, React.Children.only(children)));\n});","map":{"version":3,"sources":["ActionSheetProvider.tsx"],"names":["React","NativeActionSheet","CustomActionSheet","Provider","forwardRef","ActionSheetProvider","children","useNativeDriver","useCustomActionSheet","ref","actionSheetRef","useRef","context","useMemo","showActionSheetWithOptions","options","callback","current","useImperativeHandle","getContext","ActionSheet","Children","only"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,iBAAP;AACA,OAAOC,iBAAP;AACA,SAASC,QAAT;AASA,eAAeH,KAAK,CAACI,UAANJ,CAAgD,SAASK,mBAAT,CAAA,IAAA,EAE7DI,GAF6D,EAG7D;EAFEH,IAAAA,QAEF,GAAA,IAAA,CAFEA,QAEF;IAFYC,eAEZ,GAAA,IAAA,CAFYA,eAEZ;IAAA,qBAAA,GAAA,IAAA,CAF6BC,oBAE7B;IAF6BA,oBAE7B,GAAA,qBAAA,KAAA,KAAA,CAAA,GAFoD,KAEpD,GAAA,qBAAA;EACA,IAAME,cAAc,GAAGV,KAAK,CAACW,MAANX,CAAgC,IAAhCA,CAAvB;EAEA,IAAMY,OAAO,GAAGZ,KAAK,CAACa,OAANb,CACd,YAAA;IAAA,OAAO;MACLc,0BAA0B,EAAE,SAAA,0BAAA,CAACC,OAAD,EAA8BC,QAA9B,EAAgE;QAC1F,IAAIN,cAAc,CAACO,OAAnB,EAA4B;UAC1BP,cAAc,CAACO,OAAfP,CAAuBI,0BAAvBJ,CAAkDK,OAAlDL,EAA2DM,QAA3DN,CAAAA;QACD;MACF;IALI,CAAP;EAAA,CADcV,EAQd,CAACU,cAAD,CARcV,CAAhB;EAWAA,KAAK,CAACkB,mBAANlB,CACES,GADFT,EAEE,YAAA;IAAA,OAAO;MAELmB,UAAU,EAAE,SAAA,UAAA,CAAA,EAAA;QAAA,OAAMP,OAAN;MAAA,CAFP;MAGLE,0BAA0B,EAAEF,OAAO,CAACE;IAH/B,CAAP;EAAA,CAFFd,EAOE,CAACY,OAAD,CAPFZ,CAAAA;EAUA,IAAMoB,WAAW,GAAGpB,KAAK,CAACa,OAANb,CAClB,YAAA;IAAA,OAAOQ,oBAAoB,GAAGN,iBAAH,GAAuBD,iBAAlD;EAAA,CADkBD,EAElB,CAACQ,oBAAD,CAFkBR,CAApB;EAKA,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IAAU,KAAK,EAAEY,OAAjB;IAAA,QAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA;EAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IAAa,GAAG,EAAEF,cAAlB;IAAkC,eAAe,EAAEH,eAAnD;IAAA,QAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA;EAAA,CAAA,EACGP,KAAK,CAACqB,QAANrB,CAAesB,IAAftB,CAAoBM,QAApBN,CADH,CADF,CADF;AAOD,CAvCcA,CAAf","sourcesContent":["import * as React from 'react';\n\n// NativeActionSheet will always be custom when on Android/web\nimport NativeActionSheet from './ActionSheet';\nimport CustomActionSheet from './ActionSheet/CustomActionSheet';\nimport { Provider } from './context';\nimport { ActionSheetOptions, ActionSheetProviderRef } from './types';\n\ninterface Props {\n  children: React.ReactNode;\n  useNativeDriver?: boolean;\n  useCustomActionSheet?: boolean;\n}\n\nexport default React.forwardRef<ActionSheetProviderRef, Props>(function ActionSheetProvider(\n  { children, useNativeDriver, useCustomActionSheet = false },\n  ref\n) {\n  const actionSheetRef = React.useRef<NativeActionSheet>(null);\n\n  const context = React.useMemo(\n    () => ({\n      showActionSheetWithOptions: (options: ActionSheetOptions, callback: (i: number) => void) => {\n        if (actionSheetRef.current) {\n          actionSheetRef.current.showActionSheetWithOptions(options, callback);\n        }\n      },\n    }),\n    [actionSheetRef]\n  );\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      // backwards compatible with 13.x before context was being passed right on the ref\n      getContext: () => context,\n      showActionSheetWithOptions: context.showActionSheetWithOptions,\n    }),\n    [context]\n  );\n\n  const ActionSheet = React.useMemo(\n    () => (useCustomActionSheet ? CustomActionSheet : NativeActionSheet),\n    [useCustomActionSheet]\n  );\n\n  return (\n    <Provider value={context}>\n      <ActionSheet ref={actionSheetRef} useNativeDriver={useNativeDriver}>\n        {React.Children.only(children)}\n      </ActionSheet>\n    </Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}