{"ast":null,"code":"import * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TypingAnimation } from 'react-native-typing-animation';\nimport { useUpdateLayoutEffect } from \"./hooks/useUpdateLayoutEffect\";\nimport Color from \"./Color\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TypingIndicator = function TypingIndicator(_ref) {\n  var isTyping = _ref.isTyping;\n  var _React$useMemo = React.useMemo(function () {\n      return {\n        yCoords: new Animated.Value(200),\n        heightScale: new Animated.Value(0),\n        marginScale: new Animated.Value(0)\n      };\n    }, []),\n    yCoords = _React$useMemo.yCoords,\n    heightScale = _React$useMemo.heightScale,\n    marginScale = _React$useMemo.marginScale;\n  useUpdateLayoutEffect(function () {\n    if (isTyping) {\n      slideIn();\n    } else {\n      slideOut();\n    }\n  }, [isTyping]);\n  var slideIn = function slideIn() {\n    Animated.parallel([Animated.spring(yCoords, {\n      toValue: 0,\n      useNativeDriver: false\n    }), Animated.timing(heightScale, {\n      toValue: 35,\n      duration: 250,\n      useNativeDriver: false\n    }), Animated.timing(marginScale, {\n      toValue: 8,\n      duration: 250,\n      useNativeDriver: false\n    })]).start();\n  };\n  var slideOut = function slideOut() {\n    Animated.parallel([Animated.spring(yCoords, {\n      toValue: 200,\n      useNativeDriver: false\n    }), Animated.timing(heightScale, {\n      toValue: 0,\n      duration: 250,\n      useNativeDriver: false\n    }), Animated.timing(marginScale, {\n      toValue: 0,\n      duration: 250,\n      useNativeDriver: false\n    })]).start();\n  };\n  return _jsx(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        translateY: yCoords\n      }],\n      height: heightScale,\n      marginBottom: marginScale\n    }],\n    children: isTyping ? _jsx(TypingAnimation, {\n      style: {\n        marginLeft: 6,\n        marginTop: 7.2\n      },\n      dotRadius: 4,\n      dotMargin: 5.5,\n      dotColor: 'rgba(0, 0, 0, 0.38)'\n    }) : null\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginLeft: 8,\n    width: 45,\n    borderRadius: 15,\n    backgroundColor: Color.leftBubbleBackground\n  }\n});\nexport default TypingIndicator;","map":{"version":3,"sources":["../src/TypingIndicator.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAAA,OAAA,QAAA;AAAA,OAAA,UAAA;AAE9B,SAAS,eAAe,QAAQ,+BAA+B;AAC/D,SAAS,qBAAqB;AAC9B,OAAO,KAAK;AAAe,SAAA,GAAA,IAAA,IAAA;AAM3B,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAA,IAAA,EAA2B;EAAA,IAArB,QAAQ,GAAA,IAAA,CAAR,QAAQ;EACjC,IAAA,cAAA,GAA8C,KAAK,CAAC,OAAO,CACzD;MAAA,OAAO;QACL,OAAO,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;QAChC,WAAW,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,WAAW,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;OAClC;IAAA,CAAC,EACF,EAAE,CACH;IAPO,OAAO,GAAA,cAAA,CAAP,OAAO;IAAE,WAAW,GAAA,cAAA,CAAX,WAAW;IAAE,WAAW,GAAA,cAAA,CAAX,WAAW;EAUzC,qBAAqB,CAAC,YAAK;IACzB,IAAI,QAAQ,EAAE;MACZ,OAAO,EAAE;KACV,MAAM;MACL,QAAQ,EAAE;IACX;EACH,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;EAGd,IAAM,OAAO,GAAG,SAAV,OAAO,CAAA,EAAQ;IACnB,QAAQ,CAAC,QAAQ,CAAC,CAChB,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE;MACvB,OAAO,EAAE,CAAC;MACV,eAAe,EAAE;KAClB,CAAC,EACF,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE;MAC3B,OAAO,EAAE,EAAE;MACX,QAAQ,EAAE,GAAG;MACb,eAAe,EAAE;KAClB,CAAC,EACF,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE;MAC3B,OAAO,EAAE,CAAC;MACV,QAAQ,EAAE,GAAG;MACb,eAAe,EAAE;KAClB,CAAC,CACH,CAAC,CAAC,KAAK,EAAE;EACZ,CAAC;EAGD,IAAM,QAAQ,GAAG,SAAX,QAAQ,CAAA,EAAQ;IACpB,QAAQ,CAAC,QAAQ,CAAC,CAChB,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE;MACvB,OAAO,EAAE,GAAG;MACZ,eAAe,EAAE;KAClB,CAAC,EACF,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE;MAC3B,OAAO,EAAE,CAAC;MACV,QAAQ,EAAE,GAAG;MACb,eAAe,EAAE;KAClB,CAAC,EACF,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE;MAC3B,OAAO,EAAE,CAAC;MACV,QAAQ,EAAE,GAAG;MACb,eAAe,EAAE;KAClB,CAAC,CACH,CAAC,CAAC,KAAK,EAAE;EACZ,CAAC;EACD,OACE,IAAA,CAAC,QAAQ,CAAC,IAAI;IACZ,KAAK,EAAE,CACL,MAAM,CAAC,SAAS,EAChB;MACE,SAAS,EAAE,CACT;QACE,UAAU,EAAE;OACb,CACF;MACD,MAAM,EAAE,WAAW;MACnB,YAAY,EAAE;KACf,CACD;IAAA,QAAA,EAED,QAAQ,GACP,IAAA,CAAC,eAAe;MACd,KAAK,EAAE;QAAE,UAAU,EAAE,CAAC;QAAE,SAAS,EAAE;MAAG,CAAG;MACzC,SAAS,EAAE,CAAE;MACb,SAAS,EAAE,GAAI;MACf,QAAQ,EAAE;IAAsB,EAChC,GACA;EAAI,EACM;AAEpB,CAAC;AAED,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;EAC/B,SAAS,EAAE;IACT,UAAU,EAAE,CAAC;IACb,KAAK,EAAE,EAAE;IACT,YAAY,EAAE,EAAE;IAChB,eAAe,EAAE,KAAK,CAAC;EACxB;CACF,CAAC;AAEF,eAAe,eAAe","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TypingAnimation } from 'react-native-typing-animation';\nimport { useUpdateLayoutEffect } from './hooks/useUpdateLayoutEffect';\nimport Color from './Color';\nconst TypingIndicator = ({ isTyping }) => {\n    const { yCoords, heightScale, marginScale } = React.useMemo(() => ({\n        yCoords: new Animated.Value(200),\n        heightScale: new Animated.Value(0),\n        marginScale: new Animated.Value(0),\n    }), []);\n    // on isTyping fire side effect\n    useUpdateLayoutEffect(() => {\n        if (isTyping) {\n            slideIn();\n        }\n        else {\n            slideOut();\n        }\n    }, [isTyping]);\n    // side effect\n    const slideIn = () => {\n        Animated.parallel([\n            Animated.spring(yCoords, {\n                toValue: 0,\n                useNativeDriver: false,\n            }),\n            Animated.timing(heightScale, {\n                toValue: 35,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n            Animated.timing(marginScale, {\n                toValue: 8,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n        ]).start();\n    };\n    // side effect\n    const slideOut = () => {\n        Animated.parallel([\n            Animated.spring(yCoords, {\n                toValue: 200,\n                useNativeDriver: false,\n            }),\n            Animated.timing(heightScale, {\n                toValue: 0,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n            Animated.timing(marginScale, {\n                toValue: 0,\n                duration: 250,\n                useNativeDriver: false,\n            }),\n        ]).start();\n    };\n    return (<Animated.View style={[\n            styles.container,\n            {\n                transform: [\n                    {\n                        translateY: yCoords,\n                    },\n                ],\n                height: heightScale,\n                marginBottom: marginScale,\n            },\n        ]}>\n      {isTyping ? (<TypingAnimation style={{ marginLeft: 6, marginTop: 7.2 }} dotRadius={4} dotMargin={5.5} dotColor={'rgba(0, 0, 0, 0.38)'}/>) : null}\n    </Animated.View>);\n};\nconst styles = StyleSheet.create({\n    container: {\n        marginLeft: 8,\n        width: 45,\n        borderRadius: 15,\n        backgroundColor: Color.leftBubbleBackground,\n    },\n});\nexport default TypingIndicator;\n//# sourceMappingURL=TypingIndicator.js.map"]},"metadata":{},"sourceType":"module"}