{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport default function setNotificationChannelGroupAsync(_x, _x2) {\n  return _setNotificationChannelGroupAsync.apply(this, arguments);\n}\nfunction _setNotificationChannelGroupAsync() {\n  _setNotificationChannelGroupAsync = _asyncToGenerator(function* (groupId, group) {\n    console.debug('Notification channels feature is only supported on Android.');\n    return null;\n  });\n  return _setNotificationChannelGroupAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/setNotificationChannelGroupAsync.ts"],"names":[],"mappings":";AAcA,wBAA8B,gCAAgC,CAAA,EAAA,EAAA,GAAA;EAAA,OAAA,iCAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAM7D,SAAA,kCAAA;EAAA,iCAAA,GAAA,iBAAA,CANc,WACb,OAAe,EACf,KAAoC,EAAA;IAEpC,OAAO,CAAC,KAAK,CAAC,6DAA6D,CAAC;IAC5E,OAAO,IAAI;EACb,CAAC;EAAA,OAAA,iCAAA,CAAA,KAAA,OAAA,SAAA;AAAA","sourcesContent":["import {\n  NotificationChannelGroup,\n  NotificationChannelGroupInput,\n} from './NotificationChannelGroupManager.types';\n\n/**\n * Assigns the channel group configuration to a channel group of a specified name (creating it if need be).\n * @param groupId The channel group's identifier.\n * @param group Object representing the channel group configuration.\n * @return A `Promise` resolving to the object (of type [`NotificationChannelGroup`](#notificationchannelgroup))\n * describing the modified channel group or to `null` if the platform does not support notification channels.\n * @platform android\n * @header channels\n */\nexport default async function setNotificationChannelGroupAsync(\n  groupId: string,\n  group: NotificationChannelGroupInput\n): Promise<NotificationChannelGroup | null> {\n  console.debug('Notification channels feature is only supported on Android.');\n  return null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}