{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport NotificationScheduler from \"./NotificationScheduler\";\nimport { parseTrigger } from \"./scheduleNotificationAsync\";\nexport default function getNextTriggerDateAsync(_x) {\n  return _getNextTriggerDateAsync.apply(this, arguments);\n}\nfunction _getNextTriggerDateAsync() {\n  _getNextTriggerDateAsync = _asyncToGenerator(function* (trigger) {\n    if (!NotificationScheduler.getNextTriggerDateAsync) {\n      throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n    }\n    return yield NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n  });\n  return _getNextTriggerDateAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/getNextTriggerDateAsync.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAO,qBAAqB;AAE5B,SAAS,YAAY;AAyBrB,wBAA8B,uBAAuB,CAAA,EAAA;EAAA,OAAA,wBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAQpD,SAAA,yBAAA;EAAA,wBAAA,GAAA,iBAAA,CARc,WACb,OAA4C,EAAA;IAE5C,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;MAClD,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC;IAC9E;IAED,aAAa,qBAAqB,CAAC,uBAAuB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;EACnF,CAAC;EAAA,OAAA,wBAAA,CAAA,KAAA,OAAA,SAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { SchedulableNotificationTriggerInput } from './Notifications.types';\nimport { parseTrigger } from './scheduleNotificationAsync';\n\n/**\n * Allows you to check what will be the next trigger date for given notification trigger input.\n * @param trigger The schedulable notification trigger you would like to check next trigger date for (of type [`SchedulableNotificationTriggerInput`](#schedulablenotificationtriggerinput)).\n * @return If the return value is `null`, the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds\n * at which the notification will be triggered.\n * @example Calculate next trigger date for a notification trigger:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function logNextTriggerDate() {\n *   try {\n *     const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n *       hour: 9,\n *       minute: 0,\n *     });\n *     console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n *   } catch (e) {\n *     console.warn(`Couldn't have calculated next trigger date: ${e}`);\n *   }\n * }\n * ```\n * @header schedule\n */\nexport default async function getNextTriggerDateAsync(\n  trigger: SchedulableNotificationTriggerInput\n): Promise<number | null> {\n  if (!NotificationScheduler.getNextTriggerDateAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n  }\n\n  return await NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}