{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar Geocoder;\nexport default Geocoder = {\n  apiKey: null,\n  options: {},\n  init: function init(apiKey) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.apiKey = apiKey;\n    this.options = options;\n  },\n  get isInit() {\n    return !!this.apiKey;\n  },\n  from: function () {\n    var _from = _asyncToGenerator(function* () {\n      if (!Geocoder.isInit) throw {\n        code: Geocoder.Errors.NOT_INITIATED,\n        message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n      };\n      var queryParams;\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n      if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n        latlng: params[0] + \",\" + params[1]\n      };else if (params[0] instanceof Array) queryParams = {\n        latlng: params[0][0] + \",\" + params[0][1]\n      };else if (params[0] instanceof Object) queryParams = {\n        latlng: (params[0].lat || params[0].latitude) + \",\" + (params[0].lng || params[0].longitude)\n      };else if (typeof params[0] === 'string' && params[1] instanceof Object) queryParams = {\n        address: params[0],\n        bounds: params[1]\n      };else if (typeof params[0] === 'string') queryParams = {\n        address: params[0]\n      };\n      if (!queryParams) throw {\n          code: Geocoder.Errors.INVALID_PARAMETERS,\n          message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n        };\n      queryParams = _objectSpread(_objectSpread({\n        key: this.apiKey\n      }, this.options), queryParams);\n      var url = \"https://maps.google.com/maps/api/geocode/json?\" + toQueryParams(queryParams);\n      var response, data;\n      try {\n        response = yield fetch(url);\n      } catch (error) {\n        throw {\n          code: Geocoder.Errors.FETCHING,\n          message: \"Error while fetching. Check your network.\",\n          origin: error\n        };\n      }\n      try {\n        data = yield response.json();\n      } catch (error) {\n        throw {\n          code: Geocoder.Errors.PARSING,\n          message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n          origin: response\n        };\n      }\n      if (data.status !== 'OK') throw {\n        code: Geocoder.Errors.SERVER,\n        message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n        origin: data\n      };\n      return data;\n    });\n    function from() {\n      return _from.apply(this, arguments);\n    }\n    return from;\n  }(),\n  Errors: {\n    NOT_INITIATED: 0,\n    INVALID_PARAMETERS: 1,\n    FETCHING: 2,\n    PARSING: 3,\n    SERVER: 4\n  }\n};\nfunction encodeBounds(bounds) {\n  var southwest = bounds.southwest;\n  var northeast = bounds.northeast;\n  return encodeURIComponent(southwest.lat) + \",\" + encodeURIComponent(southwest.lng) + \"|\" + encodeURIComponent(northeast.lat) + \",\" + encodeURIComponent(northeast.lng);\n}\nfunction encodeComponent(key, value) {\n  if (key === 'bounds') {\n    return encodeBounds(value);\n  }\n  return encodeURIComponent(value);\n}\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(function (key) {\n    return !!object[key];\n  }).map(function (key) {\n    return key + \"=\" + encodeComponent(key, object[key]);\n  }).join(\"&\");\n}","map":{"version":3,"names":["Geocoder","apiKey","options","init","arguments","length","undefined","isInit","from","_from","_asyncToGenerator","code","Errors","NOT_INITIATED","message","queryParams","_len","params","Array","_key","isNaN","latlng","Object","lat","latitude","lng","longitude","address","bounds","INVALID_PARAMETERS","JSON","stringify","_objectSpread","key","url","toQueryParams","response","data","fetch","error","FETCHING","origin","json","PARSING","status","SERVER","apply","encodeBounds","southwest","northeast","encodeURIComponent","encodeComponent","value","object","keys","filter","map","join"],"sources":["C:/Users/97250/Desktop/פרויקט גמר/roadranger_1/client/travelersSide/node_modules/react-native-geocoding/Geocoder.js"],"sourcesContent":["/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n\tapiKey : null,\n\toptions : {},\n\t\n\t/**\n\t * Initialize the module.\n\t * @param {String} apiKey The api key of your application in google.\n\t * @param {Object} [options] extra options for your geocoding request.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n\t */\n\tinit(apiKey, options = {}) {\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = options;\n\t},\n\n\t/**\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\n\t */\n\tget isInit() {\n\t\treturn !!this.apiKey;\n\t},\n\n\t/**\n\t * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n\t * Accepted parameters:\n\t * <ul>\n\t *     <li>from(Number latitude, Number longitude)</li>\n\t *     <li>from(Array [latitude, longitude])</li>\n\t *     <li>from(Object {latitude, longitude})</li>\n\t *     <li>from(Object {lat, lng})</li>\n\t *     <li>from(String address)</li>\n\t * </ul>\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n\t */\n\tasync from(...params) {\n\t\t// check api key\n\t\tif (!Geocoder.isInit)\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.NOT_INITIATED,\n\t\t\t\tmessage : \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\",\n\t\t\t};\n\n\t\t// --- convert parameters ---\n\t\tlet queryParams;\n\n\t\t// (latitude, longitude)\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\n\t\t\tqueryParams = {latlng : `${params[0]},${params[1]}`};\n\n\t\t// [latitude, longitude]\n\t\telse if (params[0] instanceof Array)\n\t\t\tqueryParams = {latlng : `${params[0][0]},${params[0][1]}`};\n\n\t\t// {latitude, longitude}  or {lat, lng}\n\t\telse if (params[0] instanceof Object)\n\t\t\tqueryParams = {latlng : `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`};\n\n\t\t// address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n\t\telse if (typeof params[0] === 'string' && params[1] instanceof Object)\n\t\t\tqueryParams = {address : params[0], bounds : params[1]};\n\n\t\t// address\n\t\telse if (typeof params[0] === 'string')\n\t\t\tqueryParams = {address : params[0]};\n\n\t\t// --- start geocoding ---\n\n\t\t// check query params\n\t\tif (!queryParams)\n\t\t// no query params, means parameters where invalid\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.INVALID_PARAMETERS,\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\n\t\t\t};\n\n\t\tqueryParams = { key: this.apiKey, ...this.options, ...queryParams }\n\t\t// build url\n\t\tconst url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n\n\t\tlet response, data;\n\n\t\t// fetch\n\t\ttry {\n\t\t\tresponse = await fetch(url);\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.FETCHING,\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\n\t\t\t\torigin : error,\n\t\t\t};\n\t\t}\n\n\t\t// parse\n\t\ttry {\n\t\t\tdata = await response.json();\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.PARSING,\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n\t\t\t\torigin : response,\n\t\t\t};\n\t\t}\n\n\t\t// check response's data\n\t\tif (data.status !== 'OK')\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.SERVER,\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n\t\t\t\torigin : data,\n\t\t\t};\n\n\t\treturn data;\n\t},\n\n\t/**\n\t * All possible errors.\n\t */\n\tErrors : {\n\t\t/**\n\t\t * Module hasn't been initiated. Call {@link Geocoder.init}.\n\t\t */\n\t\tNOT_INITIATED : 0,\n\n\t\t/**\n\t\t * Parameters are invalid.\n\t\t */\n\t\tINVALID_PARAMETERS : 1,\n\n\t\t/**\n\t\t * Error wile fetching to server.\n\t\t * The error.origin property contains the original fetch error.\n\t\t */\n\t\tFETCHING : 2,\n\n\t\t/**\n\t\t * Error while parsing server response.\n\t\t * The error.origin property contains the response.\n\t\t */\n\t\tPARSING : 3,\n\n\t\t/**\n\t\t * Error from the server.\n\t\t * The error.origin property contains the response's body.\n\t\t */\n\t\tSERVER : 4,\n\t},\n}\n\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\nfunction encodeBounds(bounds) {\n\tconst southwest = bounds.southwest;\n\tconst northeast = bounds.northeast;\n\treturn `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\nfunction encodeComponent(key, value) {\n\tif (key === 'bounds') {\n\t\treturn encodeBounds(value);\n\t}\n\treturn encodeURIComponent(value);\n}\n\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\nfunction toQueryParams(object) {\n\treturn Object.keys(object)\n\t\t.filter(key => !!object[key])\n\t\t.map(key => key + \"=\" + encodeComponent(key, object[key]))\n\t\t.join(\"&\")\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}