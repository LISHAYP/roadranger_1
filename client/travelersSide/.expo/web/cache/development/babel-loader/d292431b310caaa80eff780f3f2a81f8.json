{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport NotificationScheduler from \"./NotificationScheduler\";\nexport default function cancelScheduledNotificationAsync(_x) {\n  return _cancelScheduledNotificationAsync.apply(this, arguments);\n}\nfunction _cancelScheduledNotificationAsync() {\n  _cancelScheduledNotificationAsync = _asyncToGenerator(function* (identifier) {\n    if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n      throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n    }\n    return yield NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n  });\n  return _cancelScheduledNotificationAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/cancelScheduledNotificationAsync.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAO,qBAAqB;AAsB5B,wBAA8B,gCAAgC,CAAA,EAAA;EAAA,OAAA,iCAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAM7D,SAAA,kCAAA;EAAA,iCAAA,GAAA,iBAAA,CANc,WAAgD,UAAkB,EAAA;IAC/E,IAAI,CAAC,qBAAqB,CAAC,gCAAgC,EAAE;MAC3D,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,kCAAkC,CAAC;IACnF;IAED,aAAa,qBAAqB,CAAC,gCAAgC,CAAC,UAAU,CAAC;EACjF,CAAC;EAAA,OAAA,iCAAA,CAAA,KAAA,OAAA,SAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\n\n/**\n * Cancels a single scheduled notification. The scheduled notification of given ID will not trigger.\n * @param identifier The notification identifier with which `scheduleNotificationAsync` method resolved when the notification has been scheduled.\n * @return A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier.\n * @example Schedule and then cancel the notification:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function scheduleAndCancel() {\n *   const identifier = await Notifications.scheduleNotificationAsync({\n *     content: {\n *       title: 'Hey!',\n *     },\n *     trigger: { seconds: 60, repeats: true },\n *   });\n *   await Notifications.cancelScheduledNotificationAsync(identifier);\n * }\n * ```\n * @header schedule\n */\nexport default async function cancelScheduledNotificationAsync(identifier: string): Promise<void> {\n  if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n  }\n\n  return await NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}