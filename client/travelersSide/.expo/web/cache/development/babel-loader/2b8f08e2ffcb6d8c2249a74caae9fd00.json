{"ast":null,"code":"import { EventEmitter, Platform } from 'expo-modules-core';\nimport PushTokenManager from \"./PushTokenManager\";\nvar tokenEmitter = new EventEmitter(PushTokenManager);\nvar newTokenEventName = 'onDevicePushToken';\nexport function addPushTokenListener(listener) {\n  var wrappingListener = function wrappingListener(_ref) {\n    var devicePushToken = _ref.devicePushToken;\n    return listener({\n      data: devicePushToken,\n      type: Platform.OS\n    });\n  };\n  return tokenEmitter.addListener(newTokenEventName, wrappingListener);\n}\nexport function removePushTokenSubscription(subscription) {\n  tokenEmitter.removeSubscription(subscription);\n}","map":{"version":3,"sources":["../src/TokenEmitter.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY,EAAgB,QAAQ,QAAQ,mBAAmB;AAExE,OAAO,gBAAgB;AAWvB,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC;AACvD,IAAM,iBAAiB,GAAG,mBAAmB;AA4B7C,OAAM,SAAU,oBAAoB,CAAC,QAA2B,EAAA;EAC9D,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAA,IAAA;IAAA,IAAM,eAAe,GAAA,IAAA,CAAf,eAAe;IAAA,OACzC,QAAQ,CAAC;MAAE,IAAI,EAAE,eAAe;MAAE,IAAI,EAAE,QAAQ,CAAC;IAAE,CAAE,CAAC;EAAA;EACxD,OAAO,YAAY,CAAC,WAAW,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;AACtE;AAOA,OAAM,SAAU,2BAA2B,CAAC,YAA0B,EAAA;EACpE,YAAY,CAAC,kBAAkB,CAAC,YAAY,CAAC;AAC/C","sourcesContent":["import { EventEmitter, Subscription, Platform } from 'expo-modules-core';\n\nimport PushTokenManager from './PushTokenManager';\nimport { DevicePushToken } from './Tokens.types';\n\n/**\n * A function accepting a device push token ([`DevicePushToken`](#devicepushtoken)) as an argument.\n * > **Note:** You should not call `getDevicePushTokenAsync` inside this function, as it triggers the listener and may lead to an infinite loop.\n * @header fetch\n */\nexport type PushTokenListener = (token: DevicePushToken) => void;\n\n// Web uses SyntheticEventEmitter\nconst tokenEmitter = new EventEmitter(PushTokenManager);\nconst newTokenEventName = 'onDevicePushToken';\n\n/**\n * In rare situations, a push token may be changed by the push notification service while the app is running.\n * When a token is rolled, the old one becomes invalid and sending notifications to it will fail.\n * A push token listener will let you handle this situation gracefully by registering the new token with your backend right away.\n * @param listener A function accepting a push token as an argument, it will be called whenever the push token changes.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @header fetch\n * @example Registering a push token listener using a React hook.\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * import { registerDevicePushTokenAsync } from '../api';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n */\nexport function addPushTokenListener(listener: PushTokenListener): Subscription {\n  const wrappingListener = ({ devicePushToken }) =>\n    listener({ data: devicePushToken, type: Platform.OS });\n  return tokenEmitter.addListener(newTokenEventName, wrappingListener);\n}\n\n/**\n * Removes a push token subscription returned by an `addPushTokenListener` call.\n * @param subscription A subscription returned by `addPushTokenListener` method.\n * @header fetch\n */\nexport function removePushTokenSubscription(subscription: Subscription) {\n  tokenEmitter.removeSubscription(subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}