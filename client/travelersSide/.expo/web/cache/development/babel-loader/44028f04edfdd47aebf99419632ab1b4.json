{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { useCallbackOne } from 'use-memo-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Actions(_ref) {\n  var _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    _ref$optionTintColor = _ref.optionTintColor,\n    optionTintColor = _ref$optionTintColor === void 0 ? Color.optionTintColor : _ref$optionTintColor,\n    icon = _ref.icon,\n    wrapperStyle = _ref.wrapperStyle,\n    iconTextStyle = _ref.iconTextStyle,\n    onPressActionButton = _ref.onPressActionButton,\n    containerStyle = _ref.containerStyle;\n  var _useChatContext = useChatContext(),\n    actionSheet = _useChatContext.actionSheet;\n  var onActionsPress = useCallbackOne(function () {\n    var optionKeys = Object.keys(options);\n    var cancelButtonIndex = optionKeys.indexOf('Cancel');\n    actionSheet().showActionSheetWithOptions({\n      options: optionKeys,\n      cancelButtonIndex: cancelButtonIndex,\n      tintColor: optionTintColor\n    }, function (buttonIndex) {\n      var key = optionKeys[buttonIndex];\n      if (key) {\n        options[key]();\n      }\n    });\n  }, []);\n  var renderIcon = useCallbackOne(function () {\n    if (icon) {\n      return icon();\n    }\n    return _jsx(View, {\n      style: [styles.wrapper, wrapperStyle],\n      children: _jsx(Text, {\n        style: [styles.iconText, iconTextStyle],\n        children: \"+\"\n      })\n    });\n  }, []);\n  return _jsx(TouchableOpacity, {\n    style: [styles.container, containerStyle],\n    onPress: onPressActionButton || onActionsPress,\n    children: renderIcon()\n  });\n}\nActions.propTypes = {\n  onSend: PropTypes.func,\n  options: PropTypes.object,\n  optionTintColor: PropTypes.string,\n  icon: PropTypes.func,\n  onPressActionButton: PropTypes.func,\n  wrapperStyle: StylePropType,\n  containerStyle: StylePropType\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: 26,\n    height: 26,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  wrapper: {\n    borderRadius: 13,\n    borderColor: Color.defaultColor,\n    borderWidth: 2,\n    flex: 1\n  },\n  iconText: {\n    color: Color.defaultColor,\n    fontWeight: 'bold',\n    fontSize: 16,\n    backgroundColor: Color.backgroundTransparent,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["../src/Actions.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, } from 'react-native';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { useChatContext } from './GiftedChatContext';\nimport { useCallbackOne } from 'use-memo-one';\nexport function Actions({ options = {}, optionTintColor = Color.optionTintColor, icon, wrapperStyle, iconTextStyle, onPressActionButton, containerStyle, }) {\n    const { actionSheet } = useChatContext();\n    const onActionsPress = useCallbackOne(() => {\n        const optionKeys = Object.keys(options);\n        const cancelButtonIndex = optionKeys.indexOf('Cancel');\n        actionSheet().showActionSheetWithOptions({\n            options: optionKeys,\n            cancelButtonIndex,\n            tintColor: optionTintColor,\n        }, (buttonIndex) => {\n            const key = optionKeys[buttonIndex];\n            if (key) {\n                options[key]();\n            }\n        });\n    }, []);\n    const renderIcon = useCallbackOne(() => {\n        if (icon) {\n            return icon();\n        }\n        return (<View style={[styles.wrapper, wrapperStyle]}>\n        <Text style={[styles.iconText, iconTextStyle]}>+</Text>\n      </View>);\n    }, []);\n    return (<TouchableOpacity style={[styles.container, containerStyle]} onPress={onPressActionButton || onActionsPress}>\n      {renderIcon()}\n    </TouchableOpacity>);\n}\nActions.propTypes = {\n    onSend: PropTypes.func,\n    options: PropTypes.object,\n    optionTintColor: PropTypes.string,\n    icon: PropTypes.func,\n    onPressActionButton: PropTypes.func,\n    wrapperStyle: StylePropType,\n    containerStyle: StylePropType,\n};\nconst styles = StyleSheet.create({\n    container: {\n        width: 26,\n        height: 26,\n        marginLeft: 10,\n        marginBottom: 10,\n    },\n    wrapper: {\n        borderRadius: 13,\n        borderColor: Color.defaultColor,\n        borderWidth: 2,\n        flex: 1,\n    },\n    iconText: {\n        color: Color.defaultColor,\n        fontWeight: 'bold',\n        fontSize: 16,\n        backgroundColor: Color.backgroundTransparent,\n        textAlign: 'center',\n    },\n});\n//# sourceMappingURL=Actions.js.map"]},"metadata":{},"sourceType":"module"}