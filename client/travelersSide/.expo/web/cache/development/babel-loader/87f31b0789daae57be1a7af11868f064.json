{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport { setAutoServerRegistrationEnabledAsync } from \"./DevicePushTokenAutoRegistration.fx\";\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nexport default function getExpoPushTokenAsync() {\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction _getExpoPushTokenAsync() {\n  _getExpoPushTokenAsync = _asyncToGenerator(function* () {\n    var _Constants$expoConfig, _Constants$manifest, _Constants$expoConfig2, _Constants$expoConfig3, _Constants$expoConfig4, _Constants$manifest2, _options$baseUrl, _options$url;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var devicePushToken = options.devicePushToken || (yield getDevicePushTokenAsync());\n    var deviceId = options.deviceId || (yield getDeviceIdAsync());\n    var experienceId = options.experienceId || ((_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig.originalFullName) || ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.id);\n    var projectId = options.projectId || ((_Constants$expoConfig2 = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig3 = _Constants$expoConfig2.extra) == null ? void 0 : (_Constants$expoConfig4 = _Constants$expoConfig3.eas) == null ? void 0 : _Constants$expoConfig4.projectId) || ((_Constants$manifest2 = Constants.manifest) == null ? void 0 : _Constants$manifest2.projectId);\n    if (!projectId) {\n      console.warn('Calling getExpoPushTokenAsync without specifying a projectId is deprecated and will no longer be supported in SDK 49+');\n    }\n    if (!experienceId && !projectId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\");\n    }\n    var applicationId = options.applicationId || Application.applicationId;\n    if (!applicationId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n    }\n    var type = options.type || getTypeOfToken(devicePushToken);\n    var development = options.development || (yield shouldUseDevelopmentNotificationService());\n    var baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n    var url = (_options$url = options.url) != null ? _options$url : baseUrl + \"push/getExpoPushToken\";\n    var body = _objectSpread({\n      type: type,\n      deviceId: deviceId.toLowerCase(),\n      development: development,\n      appId: applicationId,\n      deviceToken: getDeviceToken(devicePushToken)\n    }, projectId ? {\n      projectId: projectId\n    } : {\n      experienceId: experienceId\n    });\n    var response = yield fetch(url, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).catch(function (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', \"Error encountered while fetching Expo token: \" + error + \".\");\n    });\n    if (!response.ok) {\n      var statusInfo = response.statusText || response.status;\n      var _body = undefined;\n      try {\n        _body = yield response.text();\n      } catch (_unused) {}\n      throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Error encountered while fetching Expo token, expected an OK response, received: \" + statusInfo + \" (body: \\\"\" + _body + \"\\\").\");\n    }\n    var expoPushToken = getExpoPushToken(yield parseResponse(response));\n    try {\n      if (options.url || options.baseUrl) {\n        console.debug(\"[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.\");\n      } else {\n        yield setAutoServerRegistrationEnabledAsync(true);\n      }\n    } catch (e) {\n      console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', e);\n    }\n    return {\n      type: 'expo',\n      data: expoPushToken\n    };\n  });\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction parseResponse(_x) {\n  return _parseResponse.apply(this, arguments);\n}\nfunction _parseResponse() {\n  _parseResponse = _asyncToGenerator(function* (response) {\n    try {\n      return yield response.json();\n    } catch (_unused2) {\n      try {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received body: \" + JSON.stringify(yield response.text()) + \".\");\n      } catch (_unused3) {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received response: \" + JSON.stringify(response) + \".\");\n      }\n    }\n  });\n  return _parseResponse.apply(this, arguments);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Malformed response from server, expected \\\"{ data: { expoPushToken: string } }\\\", received: \" + JSON.stringify(data, null, 2) + \".\");\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction _getDeviceIdAsync() {\n  _getDeviceIdAsync = _asyncToGenerator(function* () {\n    try {\n      if (!ServerRegistrationModule.getInstallationIdAsync) {\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      }\n      return yield ServerRegistrationModule.getInstallationIdAsync();\n    } catch (e) {\n      throw new CodedError('ERR_NOTIF_DEVICE_ID', \"Could not have fetched installation ID of the application: \" + e + \".\");\n    }\n  });\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction _shouldUseDevelopmentNotificationService() {\n  _shouldUseDevelopmentNotificationService = _asyncToGenerator(function* () {\n    if (Platform.OS === 'ios') {\n      try {\n        var notificationServiceEnvironment = yield Application.getIosPushNotificationServiceEnvironmentAsync();\n        if (notificationServiceEnvironment === 'development') {\n          return true;\n        }\n      } catch (_unused4) {}\n    }\n    return false;\n  });\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"sources":["../src/getExpoPushTokenAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken, ExpoPushTokenOptions } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\n/**\n * Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service.\n *\n * This method makes requests to the Expo's servers. It can get rejected in cases where the request itself fails\n * (for example, due to the device being offline, experiencing a network timeout, or other HTTPS request failures).\n * To provide offline support to your users, you should `try/catch` this method and implement retry logic to attempt\n * to get the push token later, once the device is back online.\n *\n * > For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys.\n * For more information, see [credentials](/push-notifications/push-notifications-setup/#get-credentials-for-development-builds) in the push notifications setup.\n *\n * @param options Object allowing you to pass in push notification configuration.\n * @return Returns a `Promise` that resolves to an object representing acquired push token.\n * @header fetch\n *\n * @example\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function registerForPushNotificationsAsync(userId: string) {\n *   const expoPushToken = await Notifications.getExpoPushTokenAsync({\n *    projectId: 'your-project-id',\n *   });\n *\n *   await fetch('https://example.com/', {\n *     method: 'POST',\n *     headers: {\n *       'Content-Type': 'application/json',\n *     },\n *     body: JSON.stringify({\n *       userId,\n *       expoPushToken,\n *     }),\n *   });\n * }\n * ```\n */\nexport default async function getExpoPushTokenAsync(\n  options: ExpoPushTokenOptions = {}\n): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n\n  const experienceId =\n    options.experienceId || Constants.expoConfig?.originalFullName || Constants.manifest?.id;\n\n  const projectId =\n    options.projectId ||\n    Constants.expoConfig?.extra?.eas?.projectId ||\n    Constants.manifest?.projectId;\n\n  if (!projectId) {\n    console.warn(\n      'Calling getExpoPushTokenAsync without specifying a projectId is deprecated and will no longer be supported in SDK 49+'\n    );\n  }\n\n  if (!experienceId && !projectId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId: deviceId.toLowerCase(),\n    development,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n    ...(projectId ? { projectId } : { experienceId }),\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch((error) => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}