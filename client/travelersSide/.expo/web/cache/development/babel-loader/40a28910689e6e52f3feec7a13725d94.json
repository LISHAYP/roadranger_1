{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useLayoutEffect, useEffect, useCallback, useState, useRef } from \"react\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { collection, doc, addDoc, query, where, getDocs, orderBy, onSnapshot, push, ref } from 'firebase/firestore';\nimport { signOut } from 'firebase/auth';\nimport { auth, database } from \"../firebase\";\nimport { useNavigation } from '@react-navigation/native';\nimport GradientBackground from \"../Components/GradientBackground\";\nimport BackButton from \"../Components/BackButton\";\nimport { v4 as uuidv4 } from 'uuid';\nimport * as Notifications from 'expo-notifications';\nimport { async } from \"@firebase/util\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chat(props) {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var traveler1 = props.route.params.user;\n  var traveler = props.route.params.loggeduser;\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    chatRoomDocRef = _useState4[0],\n    setChatRoomDocRef = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    shouldRender = _useState6[0],\n    setShouldRender = _useState6[1];\n  console.log('im the logged user', traveler);\n  console.log('im the chosen one!', traveler1);\n  var onSignOut = function onSignOut() {\n    signOut(auth).catch(function (error) {\n      return console.log(error);\n    });\n  };\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          style: {\n            marginRight: 10\n          },\n          onPress: onSignOut,\n          children: _jsx(Text, {\n            children: \" Hi\"\n          })\n        });\n      }\n    });\n  }, [navigation]);\n  var createChatRoom = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var sortedUsers = [traveler.traveler_id, traveler1.traveler_id].sort();\n      var chatRoomQuery = query(collection(database, 'chat_rooms'), where('users', '==', sortedUsers));\n      var chatRoomQuerySnapshot = yield getDocs(chatRoomQuery);\n      if (chatRoomQuerySnapshot.size !== 0) {\n        var existingChatRoomRef = chatRoomQuerySnapshot.docs[0].ref;\n        setChatRoomDocRef(chatRoomQuerySnapshot.docs[0].ref);\n        console.log('Chat room exists');\n        var messagesRef = collection(database, 'chat_rooms', existingChatRoomRef.id, 'messages');\n        var q = query(messagesRef, orderBy('createdAt', 'desc'));\n        var unsubscribe = onSnapshot(q, function (querySnapshot) {\n          var messages = querySnapshot.docs.map(function (doc) {\n            var data = doc.data();\n            return {\n              _id: uuidv4(),\n              createdAt: data.createdAt.toDate(),\n              text: data.text,\n              user: data.user\n            };\n          });\n          setMessages(messages);\n          setShouldRender(false);\n        });\n        return false;\n      } else {\n        var newChatRoomDocRef = yield addDoc(collection(database, 'chat_rooms'), {\n          users: sortedUsers,\n          messages: []\n        });\n        setChatRoomDocRef(newChatRoomDocRef);\n        console.log('Chat room created');\n        return true;\n      }\n    });\n    return function createChatRoom() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useLayoutEffect(function () {\n    var getMessages = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var isNewChatRoom = yield createChatRoom();\n        if (!isNewChatRoom) {\n          var messagesRef = collection(database, 'chat_rooms', chatRoomDocRef.id, 'messages');\n          var q = query(messagesRef, orderBy('createdAt', 'desc'));\n          var unsubscribe = onSnapshot(q, function (querySnapshot) {\n            var messages = querySnapshot.docs.map(function (doc) {\n              var data = doc.data();\n              return {\n                _id: uuidv4(),\n                createdAt: data.createdAt.toDate(),\n                text: data.text,\n                user: data.user\n              };\n            });\n            setMessages(messages);\n            setShouldRender(false);\n          });\n          return function () {\n            unsubscribe();\n          };\n        }\n      });\n      return function getMessages() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    getMessages();\n  }, [traveler, traveler1]);\n  var _onSend = useCallback(_asyncToGenerator(function* () {\n    var newMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var messagesRef = chatRoomDocRef ? collection(database, \"chat_rooms/\" + chatRoomDocRef.id + \"/messages\") : null;\n    if (messagesRef) {\n      var promises = newMessages.map(function (message) {\n        var createdAt = new Date();\n        var messageData = {\n          _id: uuidv4(),\n          text: message.text,\n          createdAt: createdAt,\n          user: {\n            _id: traveler.traveler_id,\n            avatar: traveler.Picture\n          }\n        };\n        setMessages(function (previousMessages) {\n          return GiftedChat.append(previousMessages, messageData);\n        });\n        handlePushNotification(messageData, traveler1.token);\n        console.log(\"*********\", traveler1);\n        return addDoc(messagesRef, messageData);\n      });\n      Promise.all(promises).then(function () {\n        console.log('Messages sent');\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  }), [traveler, traveler1, chatRoomDocRef]);\n  var handlePushNotification = function () {\n    var _ref4 = _asyncToGenerator(function* (message, recipientToken) {\n      var notification = {\n        to: recipientToken,\n        title: \"New message from \" + traveler.first_name + \" \" + traveler.last_name + \" \",\n        body: message.text,\n        data: {\n          chatRoomDocRefId: chatRoomDocRef.id\n        }\n      };\n      fetch('http://cgroup90@194.90.158.74/cgroup90/prod/sendpushnotification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notification)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n      }).catch(function (error) {\n        console.error(error);\n        Alert.alert('Error', error);\n      });\n    });\n    return function handlePushNotification(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsx(GradientBackground, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.row,\n        children: [_jsx(View, {\n          style: styles.back,\n          children: _jsx(BackButton, {})\n        }), _jsx(View, {\n          style: styles.user,\n          children: _jsx(Image, {\n            style: styles.img,\n            source: {\n              uri: traveler1.Picture\n            }\n          })\n        }), _jsx(View, {\n          style: styles.user,\n          children: _jsxs(Text, {\n            style: styles.text,\n            children: [traveler1.first_name, \" \", traveler1.last_name, \" \"]\n          })\n        })]\n      }), messages && _jsx(GiftedChat, {\n        isTyping: true,\n        showAvatarForEveryMessage: true,\n        messages: messages,\n        onSend: function onSend(messages) {\n          return _onSend(messages);\n        },\n        user: {\n          _id: traveler.traveler_id,\n          avatar: traveler.Picture\n        }\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginBottom: 30\n  },\n  back: {\n    paddingTop: 30,\n    marginLeft: 20\n  },\n  img: {\n    height: 40,\n    width: 40,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 10\n  },\n  text: {\n    fontSize: 16,\n    top: 0,\n    fontWeight: 'bold',\n    fontSize: 25\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    width: '100%'\n  },\n  user: {\n    left: 20,\n    top: 20\n  }\n});","map":{"version":3,"names":["React","useLayoutEffect","useEffect","useCallback","useState","useRef","GiftedChat","StyleSheet","Text","View","TouchableOpacity","Image","collection","doc","addDoc","query","where","getDocs","orderBy","onSnapshot","push","ref","signOut","auth","database","useNavigation","GradientBackground","BackButton","v4","uuidv4","Notifications","async","jsx","_jsx","jsxs","_jsxs","Chat","props","navigation","_useState","_useState2","_slicedToArray","messages","setMessages","traveler1","route","params","user","traveler","loggeduser","_useState3","_useState4","chatRoomDocRef","setChatRoomDocRef","_useState5","_useState6","shouldRender","setShouldRender","console","log","onSignOut","catch","error","setOptions","headerRight","style","marginRight","onPress","children","createChatRoom","_ref","_asyncToGenerator","sortedUsers","traveler_id","sort","chatRoomQuery","chatRoomQuerySnapshot","size","existingChatRoomRef","docs","messagesRef","id","q","unsubscribe","querySnapshot","map","data","_id","createdAt","toDate","text","newChatRoomDocRef","users","apply","arguments","getMessages","_ref2","isNewChatRoom","onSend","newMessages","length","undefined","promises","message","Date","messageData","avatar","Picture","previousMessages","append","handlePushNotification","token","Promise","all","then","_ref4","recipientToken","notification","to","title","first_name","last_name","body","chatRoomDocRefId","fetch","method","headers","JSON","stringify","response","json","Alert","alert","_x","_x2","styles","container","row","back","img","source","uri","isTyping","showAvatarForEveryMessage","create","flex","marginBottom","paddingTop","marginLeft","height","width","borderRadius","alignItems","justifyContent","fontSize","top","fontWeight","flexDirection","backgroundColor","left"],"sources":["C:/Users/97250/Desktop/פרויקט גמר/roadranger_1/client/travelersSide/Screens/Chat.jsx"],"sourcesContent":["import React, { useLayoutEffect, useEffect, useCallback, useState, useRef } from \"react\";\r\nimport { GiftedChat } from 'react-native-gifted-chat'\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\r\nimport { collection, doc, addDoc, query, where, getDocs, orderBy, onSnapshot, push, ref } from 'firebase/firestore';\r\nimport { signOut } from 'firebase/auth'\r\nimport { auth, database } from '../firebase'\r\nimport { useNavigation } from '@react-navigation/native'\r\nimport GradientBackground from '../Components/GradientBackground';\r\nimport BackButton from \"../Components/BackButton\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as Notifications from 'expo-notifications';\r\nimport { async } from \"@firebase/util\";\r\n\r\nexport default function Chat(props) {\r\n\r\n    const navigation = useNavigation();\r\n    const [messages, setMessages] = useState([]);\r\n    const traveler1 = props.route.params.user;\r\n    const traveler = props.route.params.loggeduser;\r\n    const [chatRoomDocRef, setChatRoomDocRef] = useState('')\r\n    const [shouldRender, setShouldRender] = useState(false); // add state variable\r\n\r\n\r\n    console.log('im the logged user', traveler);\r\n    console.log('im the chosen one!', traveler1);\r\n\r\n    const onSignOut = () => {\r\n        signOut(auth).catch(error => console.log(error));\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            headerRight: () => (\r\n                <TouchableOpacity style={{ marginRight: 10 }} onPress={onSignOut}>\r\n                    <Text> Hi</Text>\r\n                </TouchableOpacity>\r\n            )\r\n        });\r\n    }, [navigation]);\r\n\r\n\r\n\r\n    const createChatRoom = async () => {\r\n        const sortedUsers = [traveler.traveler_id, traveler1.traveler_id].sort();\r\n        const chatRoomQuery = query(collection(database, 'chat_rooms'), where('users', '==', sortedUsers));\r\n        const chatRoomQuerySnapshot = await getDocs(chatRoomQuery);\r\n        if (chatRoomQuerySnapshot.size !== 0) {\r\n            const existingChatRoomRef = chatRoomQuerySnapshot.docs[0].ref;\r\n            setChatRoomDocRef(chatRoomQuerySnapshot.docs[0].ref);\r\n            console.log('Chat room exists');\r\n            const messagesRef = collection(database, 'chat_rooms', existingChatRoomRef.id, 'messages');\r\n            const q = query(messagesRef, orderBy('createdAt', 'desc'));\r\n            const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                const messages = querySnapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    return {\r\n                        _id: uuidv4(),\r\n                        createdAt: data.createdAt.toDate(),\r\n                        text: data.text,\r\n                        user: data.user\r\n                    };\r\n                });\r\n                // console.log('Fetched messages:', messages); // add this line\r\n                setMessages(messages);\r\n                setShouldRender(false); // update state variable to trigger re-render\r\n            });\r\n            return false; // indicate that chat room already exists\r\n        } else {\r\n            const newChatRoomDocRef = await addDoc(collection(database, 'chat_rooms'), {\r\n                users: sortedUsers,\r\n                messages: []\r\n            });\r\n            setChatRoomDocRef(newChatRoomDocRef);\r\n            console.log('Chat room created');\r\n            return true; // indicate that new chat room was created\r\n        }\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        const getMessages = async () => {\r\n            // Call createChatRoom() to make sure chat room exists\r\n            const isNewChatRoom = await createChatRoom();\r\n            if (!isNewChatRoom) {\r\n                // If a new chat room was created, do any necessary setup here\r\n                const messagesRef = collection(database, 'chat_rooms', chatRoomDocRef.id, 'messages');\r\n                const q = query(messagesRef, orderBy('createdAt', 'desc'));\r\n                const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n                    const messages = querySnapshot.docs.map(doc => {\r\n                        const data = doc.data();\r\n                        return {\r\n                            _id: uuidv4(),\r\n                            createdAt: data.createdAt.toDate(),\r\n                            text: data.text,\r\n                            user: data.user\r\n                        };\r\n                    });\r\n                    // console.log('Fetched messages:', messages); // add this line\r\n                    setMessages(messages);\r\n                    setShouldRender(false); // update state variable to trigger re-render\r\n                });\r\n\r\n                return () => {\r\n                    unsubscribe();\r\n                };\r\n            }\r\n        };\r\n\r\n        getMessages();\r\n    }, [traveler, traveler1]);\r\n\r\n\r\n    const onSend = useCallback(async (newMessages = []) => {\r\n        const messagesRef = chatRoomDocRef ? collection(database, `chat_rooms/${chatRoomDocRef.id}/messages`) : null;\r\n        if (messagesRef) {\r\n            const promises = newMessages.map((message) => {\r\n                const createdAt = new Date();\r\n                const messageData = {\r\n                    _id: uuidv4(), // add the generated ID to the message object\r\n                    text: message.text,\r\n                    createdAt: createdAt,\r\n                    user: {\r\n                        _id: traveler.traveler_id,\r\n                        avatar: traveler.Picture\r\n                    }\r\n                };\r\n                setMessages((previousMessages) => GiftedChat.append(previousMessages, messageData));\r\n                handlePushNotification(messageData, traveler1.token); // send push notification to the recipient\r\n                console.log(\"*********\", traveler1)\r\n                return addDoc(messagesRef, messageData);\r\n            });\r\n\r\n            Promise.all(promises)\r\n                .then(() => {\r\n                    console.log('Messages sent');\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    }, [traveler, traveler1, chatRoomDocRef]);\r\n\r\n\r\n    const handlePushNotification = async (message, recipientToken) => {\r\n        // Construct the message payload\r\n        const notification = {\r\n            to: recipientToken,\r\n            title: `New message from ${traveler.first_name} ${traveler.last_name} `,\r\n            body: message.text,\r\n            data: { chatRoomDocRefId: chatRoomDocRef.id },\r\n        };\r\n\r\n        // Send the notification to the recipient         \r\n        fetch('http://cgroup90@194.90.158.74/cgroup90/prod/sendpushnotification', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(notification),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                Alert.alert('Error', error);\r\n            });\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <GradientBackground>\r\n            <View style={styles.container}>\r\n                <View style={styles.row}>\r\n                    <View style={styles.back}>\r\n                        <BackButton />\r\n                    </View >\r\n                    <View style={styles.user}>\r\n                        <Image style={styles.img} source={{ uri: traveler1.Picture }} />\r\n                    </View>\r\n                    <View style={styles.user}>\r\n                        <Text style={styles.text}>{traveler1.first_name} {traveler1.last_name} </Text>\r\n                    </View>\r\n                </View>\r\n              \r\n                {messages && (\r\n                    <GiftedChat\r\n                        isTyping={true}\r\n                        showAvatarForEveryMessage={true}\r\n                        messages={messages}\r\n                        onSend={messages => onSend(messages)}\r\n                        user={{\r\n                            _id: traveler.traveler_id,\r\n                            avatar: traveler.Picture\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n            </View>\r\n        </GradientBackground>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        // backgroundColor: '#fff',\r\n        // marginTop: 40,\r\n        marginBottom: 30\r\n    },\r\n    back: {\r\n        paddingTop: 30,\r\n        marginLeft: 20\r\n    },\r\n    img: {\r\n        height: 40,\r\n        width: 40,\r\n        borderRadius: 20,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginRight: 10,\r\n    },\r\n    text: {\r\n        fontSize: 16,\r\n        top: 0,\r\n        fontWeight: 'bold',\r\n        fontSize: 25\r\n\r\n    },\r\n    row: {\r\n\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        backgroundColor: 'white',\r\n        width: '100%',\r\n        // margin: 5\r\n    },\r\n    user: {\r\n        left: 20,\r\n        top: 20,\r\n\r\n\r\n    }\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}