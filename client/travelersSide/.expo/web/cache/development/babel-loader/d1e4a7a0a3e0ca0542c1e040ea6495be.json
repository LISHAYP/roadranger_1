{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useCallbackOne, useMemoOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { TEST_ID } from \"./Constant\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    height: 44,\n    justifyContent: 'flex-end'\n  },\n  text: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17,\n    backgroundColor: Color.backgroundTransparent,\n    marginBottom: 12,\n    marginLeft: 10,\n    marginRight: 10\n  }\n});\nexport var Send = function Send(_ref) {\n  var _ref$text = _ref.text,\n    text = _ref$text === void 0 ? '' : _ref$text,\n    containerStyle = _ref.containerStyle,\n    children = _ref.children,\n    textStyle = _ref.textStyle,\n    _ref$label = _ref.label,\n    label = _ref$label === void 0 ? 'Send' : _ref$label,\n    _ref$alwaysShowSend = _ref.alwaysShowSend,\n    alwaysShowSend = _ref$alwaysShowSend === void 0 ? false : _ref$alwaysShowSend,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    sendButtonProps = _ref.sendButtonProps,\n    _ref$onSend = _ref.onSend,\n    onSend = _ref$onSend === void 0 ? function () {} : _ref$onSend;\n  var handleOnPress = useCallbackOne(function () {\n    if (text && onSend) {\n      onSend({\n        text: text.trim()\n      }, true);\n    }\n  }, [text, onSend]);\n  var showSend = useMemoOne(function () {\n    return alwaysShowSend || text && text.trim().length > 0;\n  }, [alwaysShowSend, text]);\n  if (!showSend) {\n    return null;\n  }\n  return _jsx(TouchableOpacity, _objectSpread(_objectSpread({\n    testID: TEST_ID.SEND_TOUCHABLE,\n    accessible: true,\n    accessibilityLabel: \"send\",\n    style: [styles.container, containerStyle],\n    onPress: handleOnPress,\n    accessibilityRole: \"button\",\n    disabled: disabled\n  }, sendButtonProps), {}, {\n    children: _jsx(View, {\n      children: children || _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: label\n      })\n    })\n  }));\n};\nSend.propTypes = {\n  text: PropTypes.string,\n  onSend: PropTypes.func,\n  label: PropTypes.string,\n  containerStyle: StylePropType,\n  textStyle: StylePropType,\n  children: PropTypes.element,\n  alwaysShowSend: PropTypes.bool,\n  disabled: PropTypes.bool,\n  sendButtonProps: PropTypes.object\n};","map":{"version":3,"sources":["../src/Send.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableOpacity, View, } from 'react-native';\nimport { useCallbackOne, useMemoOne } from 'use-memo-one';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { TEST_ID } from './Constant';\nconst styles = StyleSheet.create({\n    container: {\n        height: 44,\n        justifyContent: 'flex-end',\n    },\n    text: {\n        color: Color.defaultBlue,\n        fontWeight: '600',\n        fontSize: 17,\n        backgroundColor: Color.backgroundTransparent,\n        marginBottom: 12,\n        marginLeft: 10,\n        marginRight: 10,\n    },\n});\nexport const Send = ({ text = '', containerStyle, children, textStyle, label = 'Send', alwaysShowSend = false, disabled = false, sendButtonProps, onSend = () => { }, }) => {\n    const handleOnPress = useCallbackOne(() => {\n        if (text && onSend) {\n            onSend({ text: text.trim() }, true);\n        }\n    }, [text, onSend]);\n    const showSend = useMemoOne(() => alwaysShowSend || (text && text.trim().length > 0), [alwaysShowSend, text]);\n    if (!showSend) {\n        return null;\n    }\n    return (<TouchableOpacity testID={TEST_ID.SEND_TOUCHABLE} accessible accessibilityLabel='send' style={[styles.container, containerStyle]} onPress={handleOnPress} accessibilityRole='button' disabled={disabled} {...sendButtonProps}>\n      <View>\n        {children || <Text style={[styles.text, textStyle]}>{label}</Text>}\n      </View>\n    </TouchableOpacity>);\n};\nSend.propTypes = {\n    text: PropTypes.string,\n    onSend: PropTypes.func,\n    label: PropTypes.string,\n    containerStyle: StylePropType,\n    textStyle: StylePropType,\n    children: PropTypes.element,\n    alwaysShowSend: PropTypes.bool,\n    disabled: PropTypes.bool,\n    sendButtonProps: PropTypes.object,\n};\n//# sourceMappingURL=Send.js.map"]},"metadata":{},"sourceType":"module"}