{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"colors\", \"locations\", \"startPoint\", \"endPoint\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { normalizeColor } from \"./normalizeColor\";\nexport default function NativeLinearGradient(_ref) {\n  var colors = _ref.colors,\n    locations = _ref.locations,\n    startPoint = _ref.startPoint,\n    endPoint = _ref.endPoint,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState({\n      height: 1,\n      width: 1\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    _React$useState2$ = _React$useState2[0],\n    height = _React$useState2$.height,\n    width = _React$useState2$.width,\n    setLayout = _React$useState2[1];\n  var linearGradientBackgroundImage = React.useMemo(function () {\n    return getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint, width, height);\n  }, [colors, locations, startPoint, endPoint, width, height]);\n  return React.createElement(View, _objectSpread(_objectSpread({}, props), {}, {\n    style: [props.style, {\n      backgroundImage: linearGradientBackgroundImage\n    }],\n    onLayout: function onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n      setLayout(function (oldLayout) {\n        if (width !== oldLayout.width || height !== oldLayout.height) {\n          return {\n            height: height,\n            width: width\n          };\n        }\n        return oldLayout;\n      });\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  }));\n}\nexport function getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint) {\n  var width = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gradientColors = calculateGradientColors(colors, locations);\n  var angle = calculatePseudoAngle(width, height, startPoint, endPoint);\n  return \"linear-gradient(\" + angle + \"deg, \" + gradientColors.join(', ') + \")\";\n}\nfunction calculatePseudoAngle(width, height, startPoint, endPoint) {\n  var getControlPoints = function getControlPoints() {\n    var correctedStartPoint = [0, 0];\n    if (Array.isArray(startPoint)) {\n      correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n    }\n    var correctedEndPoint = [0.0, 1.0];\n    if (Array.isArray(endPoint)) {\n      correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n    }\n    return [correctedStartPoint, correctedEndPoint];\n  };\n  var _getControlPoints = getControlPoints(),\n    _getControlPoints2 = _slicedToArray(_getControlPoints, 2),\n    start = _getControlPoints2[0],\n    end = _getControlPoints2[1];\n  start[0] *= width;\n  end[0] *= width;\n  start[1] *= height;\n  end[1] *= height;\n  var py = end[1] - start[1];\n  var px = end[0] - start[0];\n  return 90 + Math.atan2(py, px) * 180 / Math.PI;\n}\nfunction calculateGradientColors(colors, locations) {\n  return colors.map(function (color, index) {\n    var output = normalizeColor(color);\n    if (locations && locations[index]) {\n      var location = Math.max(0, Math.min(1, locations[index]));\n      var percentage = location * 100;\n      return output + \" \" + percentage + \"%\";\n    }\n    return output;\n  });\n}","map":{"version":3,"sources":["../src/NativeLinearGradient.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\nimport { normalizeColor } from './normalizeColor';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [{ height, width }, setLayout] = React.useState({\n    height: 1,\n    width: 1,\n  });\n\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  const linearGradientBackgroundImage = React.useMemo(() => {\n    return getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint, width, height);\n  }, [colors, locations, startPoint, endPoint, width, height]);\n\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage: linearGradientBackgroundImage },\n      ]}\n      onLayout={(event) => {\n        const { width, height } = event.nativeEvent.layout;\n\n        setLayout((oldLayout) => {\n          // don't set new layout state unless the layout has actually changed\n          if (width !== oldLayout.width || height !== oldLayout.height) {\n            return { height, width };\n          }\n\n          return oldLayout;\n        });\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n\n/**\n * Extracted to a separate function in order to be able to test logic independently.\n */\nexport function getLinearGradientBackgroundImage(\n  colors: number[] | string[],\n  locations?: number[] | null,\n  startPoint?: NativeLinearGradientPoint | null,\n  endPoint?: NativeLinearGradientPoint | null,\n  width: number = 1,\n  height: number = 1\n) {\n  const gradientColors = calculateGradientColors(colors, locations);\n  const angle = calculatePseudoAngle(width, height, startPoint, endPoint);\n  return `linear-gradient(${angle}deg, ${gradientColors.join(', ')})`;\n}\n\nfunction calculatePseudoAngle(\n  width: number,\n  height: number,\n  startPoint?: NativeLinearGradientPoint | null,\n  endPoint?: NativeLinearGradientPoint | null\n) {\n  const getControlPoints = (): NativeLinearGradientPoint[] => {\n    let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n    if (Array.isArray(startPoint)) {\n      correctedStartPoint = [\n        startPoint[0] != null ? startPoint[0] : 0.0,\n        startPoint[1] != null ? startPoint[1] : 0.0,\n      ];\n    }\n    let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n    if (Array.isArray(endPoint)) {\n      correctedEndPoint = [\n        endPoint[0] != null ? endPoint[0] : 0.0,\n        endPoint[1] != null ? endPoint[1] : 1.0,\n      ];\n    }\n    return [correctedStartPoint, correctedEndPoint];\n  };\n\n  const [start, end] = getControlPoints();\n  start[0] *= width;\n  end[0] *= width;\n  start[1] *= height;\n  end[1] *= height;\n  const py = end[1] - start[1];\n  const px = end[0] - start[0];\n\n  return 90 + (Math.atan2(py, px) * 180) / Math.PI;\n}\n\nfunction calculateGradientColors(colors: number[] | string[], locations?: number[] | null) {\n  return colors.map((color: number | string, index: number): string | void => {\n    const output = normalizeColor(color);\n    if (locations && locations[index]) {\n      const location = Math.max(0, Math.min(1, locations[index]));\n      // Convert 0...1 to 0...100\n      const percentage = location * 100;\n      return `${output} ${percentage}%`;\n    }\n    return output;\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}