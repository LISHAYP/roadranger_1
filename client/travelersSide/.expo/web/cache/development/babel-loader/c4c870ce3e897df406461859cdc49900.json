{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useCallbackOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { warning } from \"./logging\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    maxWidth: 300\n  },\n  quickReply: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    maxWidth: 200,\n    paddingVertical: 7,\n    paddingHorizontal: 12,\n    minHeight: 50,\n    borderRadius: 13,\n    margin: 3\n  },\n  quickReplyText: {\n    overflow: 'visible'\n  },\n  sendLink: {\n    borderWidth: 0\n  },\n  sendLinkText: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17\n  }\n});\nvar sameReply = function sameReply(currentReply) {\n  return function (reply) {\n    return currentReply.value === reply.value;\n  };\n};\nvar diffReply = function diffReply(currentReply) {\n  return function (reply) {\n    return currentReply.value !== reply.value;\n  };\n};\nexport function QuickReplies(_ref) {\n  var currentMessage = _ref.currentMessage,\n    nextMessage = _ref.nextMessage,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? Color.peterRiver : _ref$color,\n    quickReplyStyle = _ref.quickReplyStyle,\n    quickReplyTextStyle = _ref.quickReplyTextStyle,\n    onQuickReply = _ref.onQuickReply,\n    _ref$sendText = _ref.sendText,\n    sendText = _ref$sendText === void 0 ? 'Send' : _ref$sendText,\n    renderQuickReplySend = _ref.renderQuickReplySend;\n  var type = currentMessage.quickReplies.type;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    replies = _useState2[0],\n    setReplies = _useState2[1];\n  var shouldComponentDisplay = useMemo(function () {\n    var hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n    var hasNext = !!nextMessage && !!nextMessage._id;\n    var keepIt = currentMessage.quickReplies.keepIt;\n    if (hasReplies && !hasNext) {\n      return true;\n    }\n    if (hasReplies && hasNext && keepIt) {\n      return true;\n    }\n    return false;\n  }, [currentMessage, nextMessage]);\n  var handlePress = useCallbackOne(function (reply) {\n    return function () {\n      if (currentMessage) {\n        var _type = currentMessage.quickReplies.type;\n        switch (_type) {\n          case 'radio':\n            {\n              handleSend([reply])();\n              return;\n            }\n          case 'checkbox':\n            {\n              if (replies.find(sameReply(reply))) {\n                setReplies(replies.filter(diffReply(reply)));\n              } else {\n                setReplies([].concat(_toConsumableArray(replies), [reply]));\n              }\n              return;\n            }\n          default:\n            {\n              warning(\"onQuickReply unknown type: \" + _type);\n              return;\n            }\n        }\n      }\n    };\n  }, [replies, currentMessage]);\n  var handleSend = function handleSend(repliesData) {\n    return function () {\n      onQuickReply === null || onQuickReply === void 0 ? void 0 : onQuickReply(repliesData.map(function (reply) {\n        return _objectSpread(_objectSpread({}, reply), {}, {\n          messageId: currentMessage._id\n        });\n      }));\n    };\n  };\n  if (!shouldComponentDisplay) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [currentMessage.quickReplies.values.map(function (reply, index) {\n      var selected = type === 'checkbox' && replies.find(sameReply(reply));\n      return _jsx(TouchableOpacity, {\n        onPress: handlePress(reply),\n        style: [styles.quickReply, quickReplyStyle, {\n          borderColor: color\n        }, selected && {\n          backgroundColor: color\n        }],\n        children: _jsx(Text, {\n          numberOfLines: 10,\n          ellipsizeMode: 'tail',\n          style: [styles.quickReplyText, {\n            color: selected ? Color.white : color\n          }, quickReplyTextStyle],\n          children: reply.title\n        })\n      }, reply.value + \"-\" + index);\n    }), replies.length > 0 && _jsx(TouchableOpacity, {\n      style: [styles.quickReply, styles.sendLink],\n      onPress: handleSend(replies),\n      children: (renderQuickReplySend === null || renderQuickReplySend === void 0 ? void 0 : renderQuickReplySend()) || _jsx(Text, {\n        style: styles.sendLinkText,\n        children: sendText\n      })\n    })]\n  });\n}\nQuickReplies.propTypes = {\n  currentMessage: PropTypes.object.isRequired,\n  onQuickReply: PropTypes.func,\n  color: PropTypes.string,\n  sendText: PropTypes.string,\n  renderQuickReplySend: PropTypes.func,\n  quickReplyStyle: StylePropType\n};","map":{"version":3,"sources":["../src/QuickReplies.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,SAAS,MAAM,YAAY;AAClC,OAAO,KAAK,IAAI,QAAQ,EAAE,OAAO,QAAQ,OAAO;AAAA,OAAA,IAAA;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAAA,OAAA,gBAAA;AAUhD,SAAS,cAAc,QAAQ,cAAc;AAE7C,OAAO,KAAK;AACZ,SAAS,aAAa;AACtB,SAAS,OAAO;AAAmB,SAAA,GAAA,IAAA,IAAA;AAAA,SAAA,IAAA,IAAA,KAAA;AAEnC,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;EAC/B,SAAS,EAAE;IACT,aAAa,EAAE,KAAK;IACpB,QAAQ,EAAE,MAAM;IAChB,QAAQ,EAAE;GACX;EACD,UAAU,EAAE;IACV,cAAc,EAAE,QAAQ;IACxB,UAAU,EAAE,QAAQ;IACpB,WAAW,EAAE,CAAC;IACd,QAAQ,EAAE,GAAG;IACb,eAAe,EAAE,CAAC;IAClB,iBAAiB,EAAE,EAAE;IACrB,SAAS,EAAE,EAAE;IACb,YAAY,EAAE,EAAE;IAChB,MAAM,EAAE;GACT;EACD,cAAc,EAAE;IACd,QAAQ,EAAE;GACX;EACD,QAAQ,EAAE;IACR,WAAW,EAAE;GACd;EACD,YAAY,EAAE;IACZ,KAAK,EAAE,KAAK,CAAC,WAAW;IACxB,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE;EACX;CACF,CAAC;AAaF,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,YAAmB;EAAA,OAAK,UAAC,KAAY;IAAA,OACtD,YAAY,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;EAAA;AAAA;AAEpC,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,YAAmB;EAAA,OAAK,UAAC,KAAY;IAAA,OACtD,YAAY,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;EAAA;AAAA;AAEpC,OAAM,SAAU,YAAY,CAAA,IAAA,EASE;EAAA,IAR5B,cAAc,GAAA,IAAA,CAAd,cAAc;IACd,WAAW,GAAA,IAAA,CAAX,WAAW;IAAA,UAAA,GAAA,IAAA,CACX,KAAK;IAAL,KAAK,GAAA,UAAA,cAAG,KAAK,CAAC,UAAU,GAAA,UAAA;IACxB,eAAe,GAAA,IAAA,CAAf,eAAe;IACf,mBAAmB,GAAA,IAAA,CAAnB,mBAAmB;IACnB,YAAY,GAAA,IAAA,CAAZ,YAAY;IAAA,aAAA,GAAA,IAAA,CACZ,QAAQ;IAAR,QAAQ,GAAA,aAAA,cAAG,MAAM,GAAA,aAAA;IACjB,oBAAoB,GAAA,IAAA,CAApB,oBAAoB;EAEpB,IAAQ,IAAI,GAAK,cAAe,CAAC,YAAa,CAAtC,IAAI;EACZ,IAAA,SAAA,GAA8B,QAAQ,CAAU,EAAE,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAA5C,OAAO,GAAA,UAAA;IAAE,UAAU,GAAA,UAAA;EAE1B,IAAM,sBAAsB,GAAG,OAAO,CAAC,YAAK;IAC1C,IAAM,UAAU,GAAG,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,cAAe,CAAC,YAAY;IACrE,IAAM,OAAO,GAAG,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAY,CAAC,GAAG;IACnD,IAAM,MAAM,GAAG,cAAe,CAAC,YAAa,CAAC,MAAM;IAEnD,IAAI,UAAU,IAAI,CAAC,OAAO,EAAE;MAC1B,OAAO,IAAI;IACZ;IAED,IAAI,UAAU,IAAI,OAAO,IAAI,MAAM,EAAE;MACnC,OAAO,IAAI;IACZ;IAED,OAAO,KAAK;EACd,CAAC,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;EAEjC,IAAM,WAAW,GAAG,cAAc,CAChC,UAAC,KAAY;IAAA,OAAK,YAAK;MACrB,IAAI,cAAc,EAAE;QAClB,IAAQ,KAAI,GAAK,cAAc,CAAC,YAAa,CAArC,IAAI;QACZ,QAAQ,KAAI;UACV,KAAK,OAAO;YAAE;cACZ,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;cACrB;YACD;UACD,KAAK,UAAU;YAAE;cACf,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;gBAClC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;eAC7C,MAAM;gBACL,UAAU,IAAA,MAAA,CAAA,kBAAA,CAAK,OAAO,IAAE,KAAK,GAAE;cAChC;cACD;YACD;UACD;YAAS;cACP,OAAO,iCAA+B,KAAI,CAAG;cAC7C;;QACD;MAEJ;IACH,CAAC;EAAA,GACD,CAAC,OAAO,EAAE,cAAc,CAAC,CAC1B;EAED,IAAM,UAAU,GAAG,SAAb,UAAU,CAAI,WAAoB;IAAA,OAAK,YAAK;MAChD,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CACV,WAAW,CAAC,GAAG,CAAC,UAAC,KAAY;QAAA,OAAA,aAAA,CAAA,aAAA,KACxB,KAAK;UACR,SAAS,EAAE,cAAe,CAAC;QAAG;MAAA,CAC9B,CAAC,CACJ;IACH,CAAC;EAAA;EAED,IAAI,CAAC,sBAAsB,EAAE;IAC3B,OAAO,IAAI;EACZ;EAED,OACE,KAAA,CAAC,IAAI;IAAC,KAAK,EAAE,MAAM,CAAC,SAAU;IAAA,QAAA,GAC3B,cAAe,CAAC,YAAa,CAAC,MAAM,CAAC,GAAG,CACvC,UAAC,KAAY,EAAE,KAAa,EAAI;MAC9B,IAAM,QAAQ,GAAG,IAAI,KAAK,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;MAEtE,OACE,IAAA,CAAC,gBAAgB;QACf,OAAO,EAAE,WAAW,CAAC,KAAK,CAAE;QAC5B,KAAK,EAAE,CACL,MAAM,CAAC,UAAU,EACjB,eAAe,EACf;UAAE,WAAW,EAAE;QAAK,CAAE,EACtB,QAAQ,IAAI;UAAE,eAAe,EAAE;QAAK,CAAE,CACtC;QAAA,QAAA,EAGF,IAAA,CAAC,IAAI;UACH,aAAa,EAAE,EAAG;UAClB,aAAa,EAAE,MAAO;UACtB,KAAK,EAAE,CACL,MAAM,CAAC,cAAc,EACrB;YAAE,KAAK,EAAE,QAAQ,GAAG,KAAK,CAAC,KAAK,GAAG;UAAK,CAAE,EACzC,mBAAmB,CACnB;UAAA,QAAA,EAED,KAAK,CAAC;QAAK;MAEhB,GAbU,KAAK,CAAC,KAAK,SAAI,KAAK,CAaX;IAEvB,CAAC,CACF,EACA,OAAO,CAAC,MAAM,GAAG,CAAC,IACjB,IAAA,CAAC,gBAAgB;MACf,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAE;MAC5C,OAAO,EAAE,UAAU,CAAC,OAAO,CAAE;MAAA,QAAA,EAE5B,CAAA,oBAAoB,KAAA,IAAA,IAApB,oBAAoB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApB,oBAAoB,EAAI,KACvB,IAAA,CAAC,IAAI;QAAC,KAAK,EAAE,MAAM,CAAC,YAAa;QAAA,QAAA,EAAE;MAAQ;IAC5C,EAEJ;EAAA,EACI;AAEX;AAEA,YAAY,CAAC,SAAS,GAAG;EACvB,cAAc,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;EAC3C,YAAY,EAAE,SAAS,CAAC,IAAI;EAC5B,KAAK,EAAE,SAAS,CAAC,MAAM;EACvB,QAAQ,EAAE,SAAS,CAAC,MAAM;EAC1B,oBAAoB,EAAE,SAAS,CAAC,IAAI;EACpC,eAAe,EAAE;CAClB","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport { Text, StyleSheet, View, TouchableOpacity, } from 'react-native';\nimport { useCallbackOne } from 'use-memo-one';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { warning } from './logging';\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        maxWidth: 300,\n    },\n    quickReply: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1,\n        maxWidth: 200,\n        paddingVertical: 7,\n        paddingHorizontal: 12,\n        minHeight: 50,\n        borderRadius: 13,\n        margin: 3,\n    },\n    quickReplyText: {\n        overflow: 'visible',\n    },\n    sendLink: {\n        borderWidth: 0,\n    },\n    sendLinkText: {\n        color: Color.defaultBlue,\n        fontWeight: '600',\n        fontSize: 17,\n    },\n});\nconst sameReply = (currentReply) => (reply) => currentReply.value === reply.value;\nconst diffReply = (currentReply) => (reply) => currentReply.value !== reply.value;\nexport function QuickReplies({ currentMessage, nextMessage, color = Color.peterRiver, quickReplyStyle, quickReplyTextStyle, onQuickReply, sendText = 'Send', renderQuickReplySend, }) {\n    const { type } = currentMessage.quickReplies;\n    const [replies, setReplies] = useState([]);\n    const shouldComponentDisplay = useMemo(() => {\n        const hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n        const hasNext = !!nextMessage && !!nextMessage._id;\n        const keepIt = currentMessage.quickReplies.keepIt;\n        if (hasReplies && !hasNext) {\n            return true;\n        }\n        if (hasReplies && hasNext && keepIt) {\n            return true;\n        }\n        return false;\n    }, [currentMessage, nextMessage]);\n    const handlePress = useCallbackOne((reply) => () => {\n        if (currentMessage) {\n            const { type } = currentMessage.quickReplies;\n            switch (type) {\n                case 'radio': {\n                    handleSend([reply])();\n                    return;\n                }\n                case 'checkbox': {\n                    if (replies.find(sameReply(reply))) {\n                        setReplies(replies.filter(diffReply(reply)));\n                    }\n                    else {\n                        setReplies([...replies, reply]);\n                    }\n                    return;\n                }\n                default: {\n                    warning(`onQuickReply unknown type: ${type}`);\n                    return;\n                }\n            }\n        }\n    }, [replies, currentMessage]);\n    const handleSend = (repliesData) => () => {\n        onQuickReply === null || onQuickReply === void 0 ? void 0 : onQuickReply(repliesData.map((reply) => ({\n            ...reply,\n            messageId: currentMessage._id,\n        })));\n    };\n    if (!shouldComponentDisplay) {\n        return null;\n    }\n    return (<View style={styles.container}>\n      {currentMessage.quickReplies.values.map((reply, index) => {\n            const selected = type === 'checkbox' && replies.find(sameReply(reply));\n            return (<TouchableOpacity onPress={handlePress(reply)} style={[\n                    styles.quickReply,\n                    quickReplyStyle,\n                    { borderColor: color },\n                    selected && { backgroundColor: color },\n                ]} key={`${reply.value}-${index}`}>\n              <Text numberOfLines={10} ellipsizeMode={'tail'} style={[\n                    styles.quickReplyText,\n                    { color: selected ? Color.white : color },\n                    quickReplyTextStyle,\n                ]}>\n                {reply.title}\n              </Text>\n            </TouchableOpacity>);\n        })}\n      {replies.length > 0 && (<TouchableOpacity style={[styles.quickReply, styles.sendLink]} onPress={handleSend(replies)}>\n          {(renderQuickReplySend === null || renderQuickReplySend === void 0 ? void 0 : renderQuickReplySend()) || (<Text style={styles.sendLinkText}>{sendText}</Text>)}\n        </TouchableOpacity>)}\n    </View>);\n}\nQuickReplies.propTypes = {\n    currentMessage: PropTypes.object.isRequired,\n    onQuickReply: PropTypes.func,\n    color: PropTypes.string,\n    sendText: PropTypes.string,\n    renderQuickReplySend: PropTypes.func,\n    quickReplyStyle: StylePropType,\n};\n//# sourceMappingURL=QuickReplies.js.map"]},"metadata":{},"sourceType":"module"}